/*
Hello, future me. I'm writing this on 8/9/19 at 2:12 AM.
I'm writing you because this script is pretty awful, but
it works and hopefully you'll be able to update this site often, without even looking in this.
on the off chance you've decided you want to take a look back,
that's very exciting. let me guide you, me. 
*/
import React from "react"
import { graphql, Link } from "gatsby";
import Layout from "../templates/layout";

export default class Projects extends React.Component {
    constructor(props){
        super(props);
        //these are the tags that the filter is adding the pulsing background to.
        this.state={activeTags:[]}

        this.handleRadioChange = this.handleRadioChange.bind(this);
    }

    componentDidMount(){
        //looking in localstorage for a possible tag given by the index.
        const getFilteredProj = localStorage.getItem('filterProj');
        if(getFilteredProj !== ''){
            //if it finds one, add it to the active tags.
            let newArr = [...this.state.activeTags];
            newArr.push(getFilteredProj);
            this.setState({activeTags:newArr});     
        }
        
    }

    componentWillUnmount(){
        //once the user leaves the page, we want to clear all tags.
        localStorage.setItem('filterProj','');
    }

    //this is fired anytime a radio box changes value.
    handleRadioChange(e){
        //if the tag is not in the list of active tags, add it.
        if(this.state.activeTags.indexOf(e.currentTarget.value) === -1){
            let newArr = [...this.state.activeTags];
            newArr.push(e.currentTarget.value);
            this.setState({activeTags:newArr});
        }else{
            //if it is in the list, remove it.
            let index = this.state.activeTags.indexOf(e.currentTarget.value);
            let newArr = this.state.activeTags.slice();
            newArr.splice(index,1);
            this.setState({activeTags:newArr});
        }
    }
    render(){
        //This is gonna be a little bumpy...
        //^^^ that was written BEFORE I even finished this, but it's not wrong...

        //get all the projectYears 
        let nodes = this.props.data.allContentfulProjectYears.nodes;
        
        //tags are generated by the tags that are on the projects themselves. (this way there will never be a tag that doesn't activate at least one project)
        let allTags = [];
        //it is also handy to count the amount of projects that have the tags we're looking for
        let projSelectedCount = 0;
        let totalProjectCount = 0;

        let projectsInYears = nodes.map((el,index)=> { 
            let projectCards = el.projectsInYear.map(proj =>{
                let des = proj.content
                
                //get the tags
                let tagsArr = proj.tags.split(",");
                allTags = allTags.concat(tagsArr);
                totalProjectCount++;
                //if a tag on a project is one of the active tags, add the highlight class to it.
                let shouldHiglight = ``;
                for(let searchTags of this.state.activeTags){
                    if(tagsArr.indexOf(searchTags) !== -1){
                        projSelectedCount++;
                        shouldHiglight = `border-8 activeElement`;
                        break;
                    }
                }

                //this returns the card
                return <div className="" key={proj.title}>
                    <CardBuilder url={proj.projectImage.file.url} title={proj.title} description={des} btnColor={proj.btnColor} projLink={proj.projectLink} isFiltered={shouldHiglight} />
                    <div className="font-bold text-lg my-4 mb-10">{proj.title}</div>
                </div>
            })

            //add a dividing bar between all years except the last one.
            
            let dividingBar = (el.order === 1) ? null : <hr className="border border-gray-400 mb-8"/> 
            
            //returns the year and then all the projects for that year.
            return <div className="" key={index}>
                <h1 className="font-bold text-xl lg:text-2xl my-4">projects completed as a {el.year}</h1>
                <div className="block lg:flex justify-between mx-auto flex-wrap">{projectCards}</div>
                {dividingBar}
            </div>
        })
        
        //this is for the radio box
        //we dont want any redundant tags, so we remove them.
        allTags = allTags.filter((el,index)=> allTags.indexOf(el) === index);

        //create the checkboxes
        const filterItems = allTags.map(el=>{
            //if it is one of the active tags, set it to checked
            if(this.state.activeTags.indexOf(el) !== -1){
                return <TagBuilder key={el} name={el} handleRadioChange={this.handleRadioChange} isChecked={true}/>
            }else{
                return <TagBuilder key={el} name={el} handleRadioChange={this.handleRadioChange} isChecked={false}/>
            }
            /*
            Am I aware that I am programmically setting the value, to the same value that the user JUST set it to? yes.
            The problem is that when the component first loads, we want to set the *possible* tags imported from the index to active, so that box isnt inverted.
            */
        })

        let shouldShowSelected = (projSelectedCount>0) ? `visible` : `invisible`;
        let projectCountText = (projSelectedCount === totalProjectCount) ? `you have all projects selected... do you just like looking at the blue border?` : `${projSelectedCount} project(s) selected`; 
        //this is rather anticlimactic if im being honest.
        return <Layout>
            <div>
                <div className="my-20 max-w-xs lg:max-w-5xl mx-auto">
                    <div className="lg:flex justify-between">
                        <div>
                            <p>select projects by type:</p>
                        </div>
                        <div className="flex justify-between flex-wrap">
                            {filterItems}
                        </div>
                    </div>
                    <div className={`my-4 ${shouldShowSelected}`}>{projectCountText}</div>
                    {projectsInYears}
                </div>
            </div>
        </Layout>
    }
}

//these are just stylings, so I dont really want to go over them. If you follow the templates on cosmic, they *should* work lol
const CardBuilder = (props) =>{
    const style={
        transition: "0.2s",
    };
    
    return <Link to={props.projLink}>
        <div className={`max-w-xs md:max-w-sm shadow-2xl rounded-lg w-96  ${props.isFiltered}`}>
            <div className="block relative">
                <div className={`overflow-hidden rounded-t-lg w-full h-40 md:h-48 bg-contain bg-no-repeat bg-center bg-white`} style={{
                    "backgroundImage":`url(${props.url})`
                }}>
                    <div className={`absolute bg-project-background opacity-0 rounded-t-lg hover:bg-project-background-active hover:opacity-100 z-0 h-40 md:h-48`} style={style}>
                        <div className="flex content-between flex-wrap h-40 py-1 md:h-48">
                            <div className="w-64 lg:w-84 text-white text-base font-bold mx-auto pt-3">{props.description}</div>
                            <div className="w-full text-white font-bold text-xl md:text-2xl ml-2">{props.title}</div>
                        </div>
                    </div>
                </div> 
                
            </div>

            <div className={`w-full text-black bg-${props.btnColor}-400 text-center py-2 font-bold rounded-b-lg`}>view project page</div>
       
        </div>
    </Link>
}

const TagBuilder = (props) => {
    return <div className="lg:mx-4">
        <input className="mr-2" type="checkbox" name={props.name} value={props.name} onChange={props.handleRadioChange} checked={props.isChecked}/>
            {props.name}
    </div>
}


export const query = graphql`
query MyQuery {
    allContentfulProjectYears(sort: {fields: order, order: DESC}) {
      nodes {
        year
        order
        projectsInYear {
          btnColor
          content
          tags
          title
          projectLink
          projectImage {
            file {
              url
            }
          }
        }
      }
    }
}
`